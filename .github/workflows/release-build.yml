name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write


jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install native build dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential ca-certificates wget unzip
          # X11 / OpenGL deps for glfw/fyne (include Xxf86vm and Xext)
          sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev libxext-dev
          # Audio / PortAudio
          sudo apt-get install -y portaudio19-dev libasound2-dev libpulse-dev

      - name: Build Linux binaries (amd64)
        run: |
          mkdir -p release
          export CGO_ENABLED=1
          export CC=gcc
          # Build only amd64 on Ubuntu hosted runners to avoid cross-compile assembler issues
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-linux-amd64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-linux
          path: release/voice-keyboard-linux-*

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install Homebrew deps (PortAudio, pkg-config)
        run: |
          brew update
          brew install portaudio pkg-config glfw

      - name: Build macOS binaries (arm64)
        env:
          CGO_ENABLED: '1'
          CC: clang
        run: |
          mkdir -p release
          # Build only arm64 on macOS runners (Homebrew on Apple silicon installs arm64 libs)
          GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-darwin-arm64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-macos
          path: release/voice-keyboard-darwin-*

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-portaudio
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-go

      # (Optional) remove this; not needed if you install Go via MSYS2
      # - uses: actions/setup-go@v4
      #   with:
      #     go-version: '1.23.x'

      - name: Verify toolchain
        shell: msys2 {0}
        run: |
          which go
          go version
          which pkg-config
          ls -l /mingw64/lib/pkgconfig/portaudio-2.0.pc
          pkg-config --modversion portaudio-2.0

      - name: Build (inside MSYS2)
        shell: msys2 {0}
        env:
          CGO_ENABLED: "1"
          CC: x86_64-w64-mingw32-gcc
          GOOS: windows
          GOARCH: amd64
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig:/mingw64/share/pkgconfig
        run: |
          mkdir -p release
          go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-windows-amd64.exe
          # Copy required DLLs
          cp /mingw64/bin/libportaudio.dll release/
          cp /mingw64/bin/libgcc_s_seh-1.dll release/
          cp /mingw64/bin/libstdc++-6.dll release/
          # Install zip if not present
          pacman -S --noconfirm zip
          # Create ZIP archive
          zip -r voice-keyboard-windows-amd64.zip release/

      - uses: actions/upload-artifact@v4
        with:
          name: release-windows
          path: voice-keyboard-windows-amd64.zip

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release/**/*
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated build artifacts for ${{ github.ref_name }}
