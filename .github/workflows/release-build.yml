name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install native build dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential ca-certificates wget unzip
          # X11 / OpenGL deps for glfw/fyne
          sudo apt-get install -y libgl1-mesa-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev
          # Audio / PortAudio
          sudo apt-get install -y portaudio19-dev libasound2-dev libpulse-dev

      - name: Build Linux binaries
        run: |
          mkdir -p release
          GOOS=linux GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-linux-amd64
          GOOS=linux GOARCH=arm64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-linux-arm64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-linux
          path: release/voice-keyboard-linux-*

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install Homebrew deps (PortAudio, pkg-config)
        run: |
          brew update
          brew install portaudio pkg-config

      - name: Build macOS binaries
        run: |
          mkdir -p release
          GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "-s -w" -o release/voice-keyboard-darwin-arm64

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-macos
          path: release/voice-keyboard-darwin-*

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install MSYS2 and required packages
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-portaudio

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build Windows binaries (native)
        shell: pwsh
        run: |
          mkdir -p release
          # Ensure MSYS2 mingw64 binaries are in PATH so pkg-config and compilers are found
          $env:Path = "C:\\msys64\\mingw64\\bin;" + $env:Path
          # Point pkg-config to MSYS2 pkgconfig dir
          $env:PKG_CONFIG_PATH = "C:\\msys64\\mingw64\\lib\\pkgconfig"
          # Build amd64
          $env:GOOS = 'windows'
          $env:GOARCH = 'amd64'
          $env:CC = 'x86_64-w64-mingw32-gcc'
          go build -trimpath -ldflags '-s -w' -o release/voice-keyboard-windows-amd64.exe
          # Build arm64 (if toolchain installed)
          $env:GOARCH = 'arm64'
          $env:CC = 'aarch64-w64-mingw32-gcc'
          # Attempt arm64 build; if compiler missing this will fail â€” that's acceptable for some runners
          go build -trimpath -ldflags '-s -w' -o release/voice-keyboard-windows-arm64.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-windows
          path: release/voice-keyboard-windows-*

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release/*
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated build artifacts for ${{ github.ref_name }}
